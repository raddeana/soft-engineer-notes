### 持续集成（Continuous integration，简称CI），简单来说持续集成就是频繁地（一天多次）将代码集成到主干，每次集成都通过自动化的构建（包括编译、发布、自动化测试）来验证，从而尽快地发现集成错误。
```
持续集成的好处：
快速发现错误，每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易；
防止分支大幅偏离主干，如果不经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。
持续集成的目的：
让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。
持续集成并不能消除 Bug，而是让它们非常容易的发现和改正。
```
### 持续交付（Continuous delivery）
```
频繁地将软件的新版本，交付给质量团队或者用户，以供评审。
持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。
```
### 持续交付和持续部署的区别
CD是持续交付和持续部署，但是持续交付不等于持续部署。持续部署则是在持续交付的基础上，把部署到生产环境的过程自动化。
### 持续集成的一般流程
```
（1）提交：流程的第一步，是开发者向代码仓库提交代码。所有后面的步骤都始于本地代码的一次提交（commit）。
（2）测试（第一轮）：代码仓库对commit操作配置了钩子（hook），只要提交代码或者合并进主干，就会跑自动化测试。
（3）构建：通过第一轮测试，代码就可以合并进主干，就算可以交付了。交付后，就先今夕构建（build），再进入第二轮测试。所谓构建，指的是将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源（样式表、JS脚本、图片）等等。常用的构建工具主要是：jeknins、Travis、codeship等。
（4）测试（第二轮）：构建完成，就要进行第二轮测试。如果第一轮已经涵盖了所有测试内容，第二轮可以省略，当然，这时构建步骤也要移到第一轮测试前面。第二轮是全面测试，单元测试和继承测试都会跑，有条件的话，也要做端对端测试。所有测试以自动化为主，少数无法自动化的测试用例，就要人工跑。
（5）部署：通过第二轮测试，当前代码就是一个可以直接部署的版本（artifact）。将这个版本的所有文件打包（tar filename.tar *）存档，发到生产服务器。生产服务器将打包文件，解包成本地的一个目录，再讲运行路径的符号链接（symlink）指向这个目录，然后重新启动应用。这方面的部署工具有Ansible、Chef、Puppet等。
（6）回滚：一旦当前版本发生问题，就要回滚到上一个版本的构建结果。最简单的做法就是修改一下符号链接，指向上一个版本的目录。\
```
### DevOps 一词的来自于 Development（开发） 和 Operations（运维） 的组合，突出重视软件开发人员和运维人员的沟通合作，通过自动化流程来使得软件构建、测试、发布更加快捷、频繁和可靠。
### DevOps如何落地
```
效的协作和沟通、自动化流程和工具、迅速敏捷的开发、持续交付和部署、不断学习和创新。
```
